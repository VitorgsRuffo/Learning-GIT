GIT: Version Control System for tracking changes in computer files.

Git Commands:

    //check if git is properly installed by asking for the version of it:
        git --version


    //initializes a new git repository on the current directory:
        git init


    //setting up the local email and username for git:
        git config --global user.email my@email.com
  
        git config --global user.name username"


    //shows us which file has changed and which file is on the staging area(ready to be comitted):
        git status


    //adding a modified file to the staging area:
        git add file-name.extension

        git add . //adds all modified files to the staging area at once.
   

    //removing a file from the staging area:
        git rm --cached file-name.extension


    //commiting files from the staging area: (i.e, saving a new version of the project)
        git commit -m "Here goes a massage that describes the project changes in this commit"


    //checking the commit history:
        git log  

        git log --oneline //shows a shorter version of the commit history.


    //GOING BACK IN TIME:

        //checking out how the code was at a particular point (commit) in the past:
            git checkout commit-id

            git checkout master //going back to the last commit.

        //undoing a particular commit by adding a new commit that reverts the changes made by the first one:
            git revert commit-id

            git revert --abort //undoing a commit may cause conflits with some other commits after it. You can cancel the revert operation (if some conflit happens) by using this command.

        //going back to a particular commit made in the past and deleting all the commits after it:
            git reset commit-id //this command doesn't change the files themselves, just the commit history. Thus if we type git status after that we will see that git interprets all those changes made by the deleted commits as changes in the files and put 'em in the 'modified area'.

            git reset commit-id --hard //use this flag if you want to delete the changes in the files too, not just in the commit history.
  
    //BRANCHING:

        //displays all the repository branches:
            git branch -a

        //creates a new branch:
            git branch branch-name
        
        //switches to a different branch:
            git checkout branch-name

        //creates a new branch and switches to it:
            git checkout -b branch-name
        
        //in case you don't want the commits made on a saparate branch you can delete that branch:
            git branch -D branch-name //deletes the branch even if you didn't merge it to the master branch yet.

            git branch -d branch-name //deletes the branch only if you have already merged it to the master branch.

        //merging branches to the master branch: (make sure you're on the master branch when running this command)
            git merge branch-name
            
           //(keep in mind that there are different ways of merging. For example, if the master branch didn't change while we were working on another branch then git will perform a 'fast forward' merge. 
           If it changed and that change happens in a place that is different from the change on the branch we're trying to merge into master git uses a 'recursive' merge
           But if the change in the master is on the same place where we're working on a different branch we're gonna have a conflit when merging. In this last case we must solve the conflits on the source code then commit the final version of the file(s)).


    //REMOTE REPOSITORIES (GITHUB):

        //Connecting to a remote repository:

            //If you already have a local repo:
                //connect your local repository with a remote one hosted on github:
                    git remote add origin https://github.com/path/to/remote/repository

                    git remote -v //shows the remote repo connected with this local one.

            //If you don't have a local repo yet:
                //bring a remote repo to your computer by creating a local version of it:    
                    git clone https://github.com/path/to/remote/repository
            

        //PUSH: after making changes (commits) on this local repo you can send 'em to the remote one by doing:
        //(merging the local repo's pointed branch into a branch on the remote repo (branch-name))   
            git push origin branch-name    
            

        //PULL: Taking a branch (branch-name) from a remote repo and merging it into the local repo's pointed branch: (we usually do that to get the commits made by other people to a specific branch)
            git pull origin branch-name 

            //obs: always pull the master branch from the remote repo before starting to work on a new feature.(that's because somebody might have pushed new commits).

        //COLLABORATION DYNAMIC:
            1-Pull the remote master branch into your local master branch;
            2-You can work on a new feature on your local repo in a separate branch;
            3-Then you can push that new branch with the new feature to the remote repo;
            4-You can open a pull request (basically it is a request for merging that branch with your changes into the master branch) on github;
            5-Other collaborators will review your changes and decide if everyone wants to merge that into the master branch.
        
        //FORKING:
            If you want to collaborate on a project (github repo) you can fork its repository.
            That will make an exact copy of it in my account.
            Then I can make the changes I wanna make. (on a new branch - remember: always test new features on different branches)
            After that I can send a Pull Request to the original's repo owner requesting to merge my repo into his. 
            He is gonna review the changes and decide if he will accept my changes.
            

    //.gitignore: file for specifing files and directories that you don't want git to keep to keep track of, therefore, they will be ignored.